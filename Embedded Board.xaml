<Window x:Class="EmbeddedSystemsArchitecture.Embedded_Board"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EmbeddedSystemsArchitecture"
        mc:Ignorable="d"
        Title="Embedded_Board" Height="679" Width="934" MaxWidth="934" MaxHeight="679" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto">
    <Grid x:Name="EmbeddedBoard">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="84*"/>
            <ColumnDefinition Width="318*"/>
            <ColumnDefinition Width="383"/>
            <ColumnDefinition Width="7*"/>
        </Grid.ColumnDefinitions>
        <Image Grid.ColumnSpan="2" Margin="0,0,0,363" Source="Image3.png" Stretch="Fill"/>
        <TextBlock HorizontalAlignment="Left" Margin="10,310,0,40" TextWrapping="Wrap" Grid.ColumnSpan="2" Width="509"><Run FontWeight="Bold" Text="Central Processing Unit"/><LineBreak/><Run Text="The processing unit of the processor is responsible for executing the following commands: "/><LineBreak/><Run Text="* Determine Instruction;  Instruction Fetch ; Instruction Decode ; Operand(data) Fetch ; Execute ; Store Results.   The processor consists of the ALU, registers , control unit and internal CPU buses, the ISA's addressing modes consists of load-store and register-memory architecture.  Secondary processors would have the functionality of a controller ISA for video or audio processors or a datapath ISA .   General purpose ISA models include the CISC  and RISC models.  The control unit (CU) is responsible for generating timing signals as well as coordinating and controlling the fetching, decoding and execution of instructions in the CPU. Once the instruction is fetched from memory and decoded , the CU determines what operation will be performed by the ALU, it selects and writes signals within and outside the CPU. "/><LineBreak/><Run/><LineBreak/><Run FontWeight="Bold" Text="Board Memory and Performance: "/><LineBreak/><Run Text="Depends on the processor's performance it's throughput (bandwidth) or the CPU's average execution rate and the bandwidth of the main memory.  Solutions for improving BW include: "/><LineBreak/><Run Text="integrating bus signals into one line, increasing transfer BW by using more memory pins, using a higher signaling rate on memory interface connections, implementing a memory hierarchy with multiple levels of cache."/></TextBlock>
        <TextBlock HorizontalAlignment="Left" Margin="66,0,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="29" Width="260" Grid.Column="2" FontSize="14"><Run Text="Verilog Hardware Description Language"/><LineBreak/><Run/></TextBlock>
        <Button x:Name="Verilog_Example" Content="Verilog Example" Grid.Column="2" HorizontalAlignment="Left" Margin="123,29,0,0" VerticalAlignment="Top" Width="103" Click="Verilog_Example_Click"/>
        <TextBlock HorizontalAlignment="Left" Margin="11,54,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="521" Width="372" Grid.Column="2" FontSize="14"><Run FontWeight="Bold" Text="Processor I/O"/><LineBreak/><Run FontSize="12" Text="* Networking and communications I/O. eg. wireless LAN"/><LineBreak/><Run FontSize="12" Text="* Input (keyboard, mouse, remote control)"/><LineBreak/><Run FontSize="12" Text="* Graphics and output I/O (touch screen, LED)"/><LineBreak/><Run FontSize="12" Text="* Storage I/O (optical disk controllers, magnetic   disk controllers, magnetic tape controllers)"/><LineBreak/><Run FontSize="12" Text="* Debugging I/O (JTAG, serial , parallel port)"/><LineBreak/><Run FontSize="12" Text="* Real time and MISC I/O (timer/counters, A-D and D-A converters, key switches and so on)"/><LineBreak/><Run FontSize="12" Text="* The UART (universal asynchronous receiver-transmitter) is a serial interface for asynchronous serial transmission"/><LineBreak/><Run FontSize="12" Text="* Serial peripheral interface is a serial interface for"/><LineBreak/><Run FontSize="12" Text="synchronous transmission."/><LineBreak/><Run FontSize="12" Text="* Serial data can be transmitted using a simplex, half duplex or a full duplex scheme between the embedded board and the I/O device for e.g Printer, Modem or VoIP Phone."/><LineBreak/><Run/><LineBreak/><Run FontWeight="Bold" FontSize="12" Text="Board Buses"/><LineBreak/><Run FontSize="12" Text="* For embedded boards with several buses connecting components that need to intercommunicate, a component called bridges on the board connect the various buses and carry information from one bus to another.  Systems(local , main, processor -memory) bus connects external main memory and cache to the master CPU and bridges to other busses. Backplane buses interconnect memory, processor and I/O.  I/O buses are standardized buses that can be either shorter or higher speed buses such as PCI and USB. The I/O buses have IRQs present.     A protocol defines how devices gain access to a bus.  The devices that communicate to the bus must follow that protocol, this is called using a bus arbitration scheme."/><LineBreak/><Run FontSize="12"/><LineBreak/><Run FontSize="12" Text="Tools: Cadence Concept Schematic and Allegro Editor can be utilized"/><LineBreak/><Run FontSize="12" Text="to design boards. Mentor graphics expedition is an alternative option. "/><LineBreak/><Run/></TextBlock>
        <Button x:Name="Allegro_Editor" Content="Allegro Editor" Grid.Column="2" HorizontalAlignment="Left" Margin="123,586,0,0" VerticalAlignment="Top" Width="113" Height="22" Click="Allegro_Editor_Click"/>

    </Grid>
</Window>
